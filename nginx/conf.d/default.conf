server {
	listen      80      default_server;
	listen [::]:80      default_server;

	# Allow requests for letsencrypt to do it's thang
	location ^~ /.well-known {
		allow all;
		root /var/lib/certbot/;
	}

	# Forward all other requests to https
	location / {
		rewrite ^ https://$host$request_uri? permanent;
	}
}

server {
    listen 443          ssl http2 default_server;
    listen [::]:443     ssl http2 default_server;

    server_name _;

	# Don't tell nginx version to clients.
	server_tokens       off;

	# Security headers
	add_header          Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    ssl_session_cache   shared:SSL:20m;
	ssl_session_timeout 10m;

    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";

	# ssl_stapling              on;
	# ssl_stapling_verify       on;
	# resolver                  8.8.8.8 8.8.4.4;

    ssl_certificate             /data/certs/fullchain.pem;
    ssl_certificate_key         /data/certs/privkey.pem;
    # ssl_certificate           /etc/letsencrypt/live/e.matryx.ai/fullchain.pem;
    # # ssl_certificate           /etc/letsencrypt/live/e.matryx.ai/cert.pem;
	# ssl_certificate_key       /etc/letsencrypt/live/e.matryx.ai/privkey.pem;

    # default location doing ssl termination.
    # forwards to an upstream host on the docker network http://$host:80
    # location / {
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection $http_connection;
    #     #proxy_http_version 1.1;
    #     proxy_redirect off;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     proxy_set_header X-Https-Protocol $ssl_protocol;

    #     resolver 127.0.0.11; # use docker-internal dns
    #     proxy_pass http://$host:80;
    # }
    location / {
		ROOT_RESPONSE
	}

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
